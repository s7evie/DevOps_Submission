version: 2.1

orbs:
  slack: circleci/slack@4.12.0

commands:
  destroy_environment:
    description: Destroys the CloudFormation stacks when given the workflow ID
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy Environment
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert_migrations:
    description: Revert last migration
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migration
          when: on_fail
          command: |
            # SUCCESS=$(curl --insecure https://kvdb.io/9GUkdnECuy153GqG81x7yZ/migration_<< parameters.workflow_id >>)
            SUCCESS=$(curl --insecure https://kvdb.io/9GUkdnECuy153GqG81x7yZ/migration_$CIRCLE_WORKFLOW_ID:0:7)
            # SUCCESS=$(curl --insecure https://kvdb.io/9GUkdnECuy153GqG81x7yZ/migration_s7evie)
            if(( $SUCCESS==1 ));
            then
              echo "curl result = {$SUCCESS}"
              cd ~/project/backend
              npm i
              npm run migrations:revert
            else
              echo "curl result = {$SUCCESS}"
              echo "kvdb returned a 0 or null response.  revert not executed"
            fi

  slack_notify_fail:
    description: Notifies slack channel upon job failure
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
  slack_notify_pass:
    description: Notifies slack channel upon job success
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1
 
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
          # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
          # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm i
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: front-build
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm i
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: back-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: front-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: back-build

  deploy-infrastructure:
    docker:      # Docker image here that supports AWS CLI.
      - image: amazon/aws-cli
    steps:       # Checkout code from git.
      - checkout 
      - run:
          name: Install tar gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Backend infrastructure check
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Frontend infrastructure check
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
            # Your code here 20/03, added restriction into tag value as not to call in prometheus servers.
          command: |
            aws ec2 describe-instances \
              --filter Name=tag-value,Values=udapeople \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text >> .circleci/ansible/inventory.txt
               cat .circleci/ansible/inventory.txt
            # aws ec2 describe-instances \
            #   --query 'Reservations[*].Instances[*].PublicIpAddress' \
            #   --output text >> .circleci/ansible/inventory.txt
            # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy_environment
      - revert_migrations

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.11-rc-alpine
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["17:97:ad:72:5f:9b:89:92:f1:ab:9d:35:3c:45:2d:c4"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible aws-cli curl
          #  exit 1
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
          #  exit 1
      # Here's where you will add some code to rollback on failure      
      - destroy_environment
      - revert_migrations

  run-migrations:
    docker:
      - image: circleci/node:14.18.1
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - checkout
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            pwd
            ls -l
            cd backend
            npm install
            npm run build
            npm run migrations:revert
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            #exit 1
      - run:
          name: Send migration output to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
            then
              # echo "insecure" >> ~/.curlrc
              curl https://kvdb.io/9GUkdnECuy153GqG81x7yZ/migration_s7evie -d '1'
            else
              echo "there was an issue with execution"
            fi
            #exit 1
     # Here's where you will add some code to rollback on failure    
      - destroy_environment
      - revert_migrations

  deploy-frontend:
    docker:      # Docker image here that supports AWS CLI
      - image: circleci/node:14.18.1
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get update
            sudo apt-get upgrade
            sudo apt-get install -y python3
            sudo apt-get install -y awscli
            sudo apt-get install -y tar gzip
            sudo apt-get install -y curl
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure    
      - destroy_environment
      - revert_migrations

  deploy-backend:
    docker:
      # Docker image here that supports Ansible.
      - image: python:3.11-rc-alpine
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["17:97:ad:72:5f:9b:89:92:f1:ab:9d:35:3c:45:2d:c4"]      
      # attach workspace
      - attach_workspace:
          at: ~/
#      - restore_cache:
#          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk update
            apk add --update ansible
            apk add --no-cache tar npm gzip curl gcompat
            apk add --no-cache python3 py3-pip            
            pip3 install --upgrade pip
            pip3 install awscli
            rm -rf /var/cache/apk/*
            echo "Verify aws cli version"
            aws --version   
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failures 
      - destroy_environment
      - revert_migrations

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.11-rc-alpine
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible aws-cli curl
          #  exit 1
      - run:
          name: Backend smoke test
          command: |
            # Fetch and prepare the BACKEND_IP env var.
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here.
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure..
      - destroy_environment
      - revert_migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            echo "OldWorkflowID: ${OldWorkflowID}"
            echo "Stack names: ${STACKS[@]}"
            echo ${OldWorkflowID} >> OldWorkflowID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - project/OldWorkflowID.txt
      - destroy_environment
      - revert_migrations

  cleanup:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat OldWorkflowID.txt)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo OldWorkflowID= "${OldWorkflowID:10:17}"
            echo CIRCLE_WORKFLOW_ID= "${CIRCLE_WORKFLOW_ID:0:7}"
            echo Stack names= "${STACKS[@]}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID:0:7}" ]]
            then
              echo "Commence cleanup of S3 & cloudformation stacks"
              echo bucket= "s3://udapeople-${OldWorkflowID:10:17}"
              aws s3 rb "s3://udapeople-${OldWorkflowID:10:17}" --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID:10:17}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID:10:17}"
            else
              echo "no action required"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]